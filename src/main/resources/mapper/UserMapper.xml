<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.userSystem.dao.UserMapper">

    <!-- Create Database -->
    <update id="createDatabase">
        CREATE
        DATABASE IF NOT EXISTS `user_system`;
    </update>

    <!-- Create Table -->
    <insert id="createUserSystemTable">
        CREATE TABLE `user_system`.`user`
        (
            `id`           BIGINT(19) NOT NULL AUTO_INCREMENT,
            `account`      VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8mb4_general_ci',
            `username`     VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8mb4_general_ci',
            `password`     VARCHAR(512) NULL DEFAULT NULL COLLATE 'utf8mb4_general_ci',
            `email`        VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8mb4_general_ci',
            `created_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            `updated_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`) USING BTREE,
            UNIQUE INDEX `account` (`account`) USING BTREE,
            UNIQUE INDEX `email` (`email`) USING BTREE,
            INDEX          `login` (`account`, `password`) USING BTREE
        ) COLLATE='utf8mb4_general_ci'
    ENGINE=InnoDB;
    </insert>
    <!-- 插入一個用戶 -->
    <insert id="insertUser" parameterType="com.userSystem.model.UserBo">
        insert into user_system.user (account, password, username, email)
        values (#{account}, #{password}, #{username}, #{email})
    </insert>

    <!-- 根據 dbName TableName 查詢是否存在 -->
    <select id="checkTableExistence" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM information_schema.tables
        WHERE table_schema = #{dbName}
          AND table_name = #{tableName}
    </select>

    <!-- 根據 id 查詢一個用戶 -->
    <select id="selectUserById" parameterType="long" resultType="com.userSystem.model.UserRo">
        select id, account, password, username
        from user_system.user
        where id = #{id}
    </select>
    <!-- 根據 account、password 查詢一個用戶 -->
    <select id="selectUserByAccountPassword" parameterType="com.userSystem.model.UserBo"
            resultType="com.userSystem.model.UserVo">
        select account, username, email
        from user_system.user
        where account = #{account}
          and password = #{password}
    </select>

    <select id="selectUserByAccountOrEmail" parameterType="com.userSystem.model.UserBo"
            resultType="com.userSystem.model.UserVo">
        select account, username, email
        from user_system.user
        where account = #{account}
           or email = #{email}
    </select>
    <!-- 查詢所有用戶 -->
    <select id="selectAllUser" resultType="com.userSystem.model.UserRo">
        select id, account, password, username
        from user_system.user
    </select>
    <!-- 根據 id 更新一個用戶 -->
    <update id="updateUserById" parameterType="com.userSystem.model.UserRo">
        update user_system.user
        set account  = #{account},
            username = #{username},
            password = #{password}
        where id = #{id}
    </update>

    <!-- 根據 account、password 更新一個用戶，如果null則不更新 -->
    <update id="updateUser" parameterType="com.userSystem.model.UserBo">
        UPDATE user_system.user
        <trim prefix="set" suffixOverrides=",">
            <if test="newPassword != null">
                password = #{newPassword},
            </if>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="email != null">
                email = #{email}
            </if>
        </trim>
        WHERE account = #{account}
        AND password = #{password}
    </update>
    <!-- 根據 account、email 更新一個用戶密碼 -->
    <update id="updatePassword">
        UPDATE user_system.user
        <set>
            <if test="userBo.newPassword != null">
                password = #{userBo.newPassword},
            </if>
        </set>
        WHERE account = #{userBo.account}
        OR email = #{email}
    </update>


    <!-- 根據 id 刪除一個用戶 -->
    <delete id="deleteUserById" parameterType="long">
        delete
        from user_system.user
        where id = #{id}
    </delete>
</mapper>
